generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model arquivo {
  id                     String   @id(map: "arquivo_pk") @db.Uuid
  url                    String   @db.VarChar
  artigo                 Int
  createdAt              DateTime @default(now())
  artigo_arquivoToartigo artigo   @relation(fields: [artigo], references: [id], onDelete: Cascade, map: "arquivo_fk")
}

model artigo {
  id                          Int                  @id(map: "artigo_pk") @default(autoincrement())
  nome                        String               @db.VarChar
  autor                       String?              @db.VarChar
  sumario                     String               @db.VarChar
  categoria                   Int
  status                      Int
  categoria_artigoTocategoria categoria            @relation(fields: [categoria], references: [id], onDelete: Cascade, map: "artigo_fk")
  status_artigoTostatus       status               @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artigo_fk_1")
  arquivo                     arquivo[]
  artigo_repositorio          artigo_repositorio[]
  autor_artigo                autor_artigo[]
}

model artigo_repositorio {
  id                                          Int         @id(map: "artigo_repositorio_pk") @default(autoincrement())
  artigo                                      Int
  repositorio                                 Int
  artigo_artigoToartigo_repositorio           artigo      @relation(fields: [artigo], references: [id], onDelete: Cascade, map: "artigo_repositorio_fk")
  repositorio_artigo_repositorioTorepositorio repositorio @relation(fields: [repositorio], references: [id], onDelete: Cascade, map: "artigo_repositorio_fk_1")
}

model autor_artigo {
  id                          Int     @id(map: "autor_artigo_pk") @default(autoincrement())
  autor                       String  @db.Uuid
  artigo                      Int
  artigo_artigoToautor_artigo artigo  @relation(fields: [artigo], references: [id], onDelete: Cascade, map: "autor_artigo_fk_1")
  usuario                     usuario @relation(fields: [autor], references: [id], onDelete: Cascade, map: "autor_artigo_fk")
}

model categoria {
  id     Int      @id(map: "categoria_pk") @default(autoincrement())
  nome   String   @db.VarChar
  artigo artigo[]
}

model foto {
  id         String   @id(map: "foto_pk") @db.Uuid
  url        String   @db.VarChar
  id_usuario String   @db.Uuid
  createdAt  DateTime @default(now())
  usuario    usuario  @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "foto_fk")
}

model redesocial {
  id                          Int     @id(map: "redesocial_pk") @default(autoincrement())
  link                        String  @unique(map: "redesocial_un") @db.VarChar
  usuario                     String  @db.Uuid
  usuario_redesocialTousuario usuario @relation(fields: [usuario], references: [id], onDelete: Cascade, map: "redesocial_fk")
}

model repositorio {
  id                 Int                  @id(map: "repositorio_pk") @default(autoincrement())
  nome               String               @unique(map: "repositorio_un") @db.VarChar
  dono               String               @db.Uuid
  usuario            usuario              @relation(fields: [dono], references: [id], onDelete: Cascade, map: "repositorio_fk")
  artigo_repositorio artigo_repositorio[]
}

model status {
  id     Int      @id(map: "status_pk") @default(autoincrement())
  status String   @db.VarChar
  artigo artigo[]
}

model usuario {
  id           String         @id(map: "usuario_pk") @db.Uuid
  nome         String         @unique(map: "usuario_un") @db.VarChar
  email        String         @unique(map: "usuario_un_1") @db.VarChar
  senha        String         @db.VarChar
  permissao    Boolean
  matricula    String         @db.VarChar
  autor_artigo autor_artigo[]
  foto         foto[]
  redesocial   redesocial[]
  repositorio  repositorio[]
}
