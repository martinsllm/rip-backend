generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model arquivo {
  id        String   @id(map: "arquivo_pk") @db.Uuid
  url       String   @db.VarChar
  artigoId  Int
  createdAt DateTime @default(now())
  artigo    artigo   @relation(fields: [artigoId], references: [id], onDelete: Cascade, map: "arquivo_fk")
}

model artigo {
  id                 Int                  @id(map: "artigo_pk") @default(autoincrement())
  sumario            String               @db.VarChar
  categoriaId        Int
  statusId           Int
  titulo             String               @db.VarChar
  categoria          categoria            @relation(fields: [categoriaId], references: [id], onDelete: Cascade, map: "artigo_fk")
  status             status               @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artigo_fk_1")
  arquivo            arquivo[]
  artigo_repositorio artigo_repositorio[]
  autor_artigo       autor_artigo[]
}

model artigo_repositorio {
  id            Int         @id(map: "artigo_repositorio_pk") @default(autoincrement())
  artigoId      Int
  repositorioId Int         @unique(map: "artigo_repositorio_un")
  artigo        artigo      @relation(fields: [artigoId], references: [id], onDelete: Cascade, map: "artigo_repositorio_fk")
  repositorio   repositorio @relation(fields: [repositorioId], references: [id], onDelete: Cascade, map: "artigo_repositorio_fk_1")
}

model autor_artigo {
  id       Int     @id(map: "autor_artigo_pk") @default(autoincrement())
  autorId  String  @db.Uuid
  artigoId Int
  artigo   artigo  @relation(fields: [artigoId], references: [id], onDelete: Cascade, map: "autor_artigo_fk_1")
  usuario  usuario @relation(fields: [autorId], references: [id], onDelete: Cascade, map: "autor_artigo_fk")

  @@unique([autorId, artigoId], map: "autor_artigo_un")
}

model categoria {
  id     Int      @id(map: "categoria_pk") @default(autoincrement())
  nome   String   @unique(map: "categoria_un") @db.VarChar
  artigo artigo[]
}

model foto {
  id         String   @id(map: "foto_pk") @db.Uuid
  url        String   @db.VarChar
  id_usuario String   @db.Uuid
  createdAt  DateTime @default(now())
  usuario    usuario  @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "foto_fk")
}

model redesocial {
  id        Int     @id(map: "redesocial_pk") @default(autoincrement())
  link      String  @unique(map: "redesocial_un") @db.VarChar
  usuarioId String  @db.Uuid
  usuario   usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade, map: "redesocial_fk")
}

model repositorio {
  id                 Int                 @id(map: "repositorio_pk") @default(autoincrement())
  nome               String              @unique(map: "repositorio_un") @db.VarChar
  dono               String              @db.Uuid
  usuario            usuario             @relation(fields: [dono], references: [id], onDelete: Cascade, map: "repositorio_fk")
  artigo_repositorio artigo_repositorio?
}

model status {
  id     Int      @id(map: "status_pk") @default(autoincrement())
  status String   @unique(map: "status_un") @db.VarChar
  artigo artigo[]
}

model usuario {
  id           String         @id(map: "usuario_pk") @db.Uuid
  nome         String         @unique(map: "usuario_un") @db.VarChar
  email        String         @unique(map: "usuario_un_1") @db.VarChar
  senha        String         @db.VarChar
  permissao    Boolean
  matricula    String         @db.VarChar
  autor_artigo autor_artigo[]
  foto         foto[]
  redesocial   redesocial[]
  repositorio  repositorio[]
}
